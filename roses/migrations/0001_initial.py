# Generated by Django 5.0.1 on 2024-02-27 11:36

import django.contrib.postgres.indexes
import django.contrib.postgres.search
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('plants', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='RoseSpecies',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Классификация роз: Вид. Пример: Роза канадская.', max_length=100, unique=True, verbose_name='название')),
            ],
            options={
                'verbose_name': 'вид розы',
                'verbose_name_plural': 'виды роз',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='RoseProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('head_title', models.CharField(max_length=80, verbose_name='заголовок')),
                ('meta_description', models.CharField(max_length=160, verbose_name='мета описание')),
                ('name', models.CharField(max_length=80, unique=True, verbose_name='название')),
                ('slug', models.SlugField(max_length=80, unique=True, verbose_name='слаг')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='дата обновления')),
                ('is_visible', models.BooleanField(db_index=True, default=1, verbose_name='показывать')),
                ('short_description', models.CharField(max_length=250, verbose_name='короткое описание')),
                ('description', models.TextField(blank=True, verbose_name='описание')),
                ('features', models.CharField(blank=True, max_length=250, verbose_name='особенности')),
                ('scientific_name', models.CharField(blank=True, max_length=100, verbose_name='научное название')),
                ('height', models.CharField(blank=True, help_text='Можно вводить цифры, от, до, м, см, "-" и ",". Например: 0,5 м, 0,5-1 м, от 0,5 м, до 0,5 м', max_length=10, validators=[django.core.validators.RegexValidator('^((от|до)[\\s])?\\d{1,3}(\\,\\d{1,3})?(\\-?\\d{1,3}(\\,\\d{1,3})?)?([\\s](м|см))?$', 'Можно вводить цифры, от, до, м, см, "-" и ","')], verbose_name='высота взрослого растения')),
                ('width', models.CharField(blank=True, help_text='Можно вводить цифры, от, до, м, см, "-"  и ",". Например: 0,5 м, 0,5-1 м, от 0,5 м, до 0,5 м', max_length=10, validators=[django.core.validators.RegexValidator('^((от|до)[\\s])?\\d{1,3}(\\,\\d{1,3})?(\\-?\\d{1,3}(\\,\\d{1,3})?)?([\\s](м|см))?$', 'Можно вводить цифры, от, до, м, см, "-" и ","')], verbose_name='ширина взрослого растения')),
                ('flowering', models.CharField(blank=True, max_length=100, verbose_name='цветение')),
                ('quantity_on_stem', models.CharField(blank=True, help_text='Можно вводить цифры, "-" и "+"', max_length=5, null=True, validators=[django.core.validators.RegexValidator('^[0-9+\\-\\+\\/дот, ]+$', 'Можно вводить цифры, "/", "-" и "+"')], verbose_name='количество на стебле')),
                ('flavor', models.CharField(blank=True, max_length=15, verbose_name='аромат')),
                ('flower_size', models.CharField(blank=True, help_text='Можно вводить цифры, от, до, "-". Например: 5, 5-10, от 5, до 5.', max_length=7, validators=[django.core.validators.RegexValidator('^[0-9+\\-\\+\\/дот, ]+$', 'Можно вводить цифры, "/", "-" и "+"')], verbose_name='размер цветка, см')),
                ('resistance_fungus', models.CharField(blank=True, max_length=15, verbose_name='устойчивость к грибковым инфекциям')),
                ('resistance_rain', models.CharField(blank=True, max_length=15, verbose_name='устойчивость к дождю')),
                ('shelter_winter', models.CharField(blank=True, max_length=50, verbose_name='укрытие на зиму')),
                ('winter_zone', models.CharField(blank=True, max_length=15, verbose_name='зона зимостойкости в градусах')),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(null=True)),
                ('advantages', models.ManyToManyField(blank=True, related_name='+', to='plants.plantadvantage', verbose_name='достоинства')),
                ('species', models.ForeignKey(help_text='Классификация растений: Отдел \\ Род \\ Вид. Пример: Хвойные \\ Ель \\ Ель канадская.', on_delete=django.db.models.deletion.CASCADE, to='roses.rosespecies', verbose_name='вид')),
            ],
            options={
                'verbose_name': 'роза',
                'verbose_name_plural': 'розы',
                'ordering': ('name', 'species'),
            },
        ),
        migrations.CreateModel(
            name='RoseProductPrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='цена, руб')),
                ('container', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.plantpricecontainer', verbose_name='контейнер')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='roses.roseproduct', verbose_name='роза')),
            ],
            options={
                'verbose_name': 'цена',
                'verbose_name_plural': 'цены',
                'ordering': ('price',),
                'abstract': False,
            },
        ),
        migrations.AddIndex(
            model_name='roseproduct',
            index=django.contrib.postgres.indexes.GinIndex(fields=['search_vector'], name='roses_rosep_search__012494_gin'),
        ),
        migrations.AddIndex(
            model_name='roseproduct',
            index=django.contrib.postgres.indexes.GinIndex(fields=['name'], name='trgm_roseproduct_idx', opclasses=['gin_trgm_ops']),
        ),
    ]
