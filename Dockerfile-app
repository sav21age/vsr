# FROM python:3.10.1-alpine

# WORKDIR /home/som

# ENV PYTHONDONTWRITEBYTECODE 1
# ENV PYTHONUNBUFFERED 1

# RUN apk update && apk --no-cache add postgresql-dev gcc \
#    python3-dev musl-dev \
#    libffi-dev openssl-dev \
#    build-base jpeg-dev zlib-dev \
#    libxml2-dev libxslt-dev

# COPY . .

# RUN pip install --upgrade pip \
#     && pip install --no-cache-dir -r requirements.txt

# RUN chmod +x /home/som/entrypoint.sh
# ENTRYPOINT ["/home/som/entrypoint.sh"]

# ENV HOME=/home/som



FROM python:3.10.1-alpine as builder

# set work directory
WORKDIR /usr/src/app

ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# RUN apk update && apk --no-cache add postgresql-dev gcc git \
#    python3-dev musl-dev \
#    libffi-dev openssl-dev \
#    build-base jpeg-dev zlib-dev \
#    libxml2-dev libxslt-dev

RUN apk update \
    && apk add postgresql-dev gcc python3-dev musl-dev

RUN pip install --upgrade pip
COPY . .
COPY ./requirements.txt .
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/app/wheels -r requirements.txt

FROM python:3.10.1-alpine

# create directory for the app user
RUN mkdir -p /home/app

# create the app user
# RUN addgroup -S app && adduser -S app -G app
RUN addgroup -g 1111 -S app && adduser -u 1111 -S app -G app

# create the appropriate directories
ENV HOME=/home/app
ENV APP_HOME=/home/app/web
RUN mkdir $APP_HOME
WORKDIR $APP_HOME

# install dependencies
RUN apk update && apk add libpq
COPY --from=builder /usr/src/app/wheels /wheels
COPY --from=builder /usr/src/app/requirements.txt .
RUN pip install --no-cache /wheels/*

# copy entrypoint.sh
COPY ./entrypoint.sh $APP_HOME

# copy project
COPY . $APP_HOME

# chown all the files to the app user
RUN chown -R app:app $APP_HOME

# change to the app user
USER app

# run entrypoint.sh
ENTRYPOINT ["sh", "/home/app/web/entrypoint.sh"]
